Katalon studio notes:
---------------------
---------------------

Link where I learned:
https://www.youtube.com/watch?v=xBjNhauVDio&list=PLhW3qG5bs-L_D4ZePNNjvmIULuu6mBHbu&index=1



Tutorial 1: Introduction
-----------
Katalon studio os the free tool for automation of web, API and mobile
It is easy to learn. Any manual tester can easily learn katalon studio
We can use it for web automation, mobile (android & ios) automation and for API
It can be integrated with jira, git or jenkins
We can do cross browser testing
We can record and replay

Tutorial 2: Installation & setup
----------
Type katalon studio in google
Go to offical website of katalon studio
Signup and download katalon studio
Install katalon studio

Tutorial 3: GUI options and its uses
----------
Help -> Guick guide     //This will show the use of each option in UI

Main tool:
new //This is to add new test or new project or new object repor etc
Spy web or Spy mobile //This is capture object by doing some action in application
Record //This is used to record the test by doing manually and recording
Run //Used to run the test
Debug  //Used to debug the test
Stop  //Used to stop the test
Build CMD //Used to create command line tool. So that we dont want to open the UI to run. we can run using command
Git //Used to integrated Git repo

Test Explorer:  //This option is available above the test cases
Here it will test cases, object repo, test suite, data files etc
we can filder with name and component

Keyword browser:
This will show all available keywords

Editor:
For test, it will show manual, code, variable and integration.  //manual is to manually add a step in test, code is code the action or step, variable will show all global variable
For object repository, it will give the option to add object or identifier
For test suite, it will the option to add test case in test suite. We can enable or disable any test here
For data files, it will give the option to add test data via excel, csv, text or db etc
For keyword, this will give option to edit the keyword behaviour


views:
This will give option to view global variables, console output, test cases status pass/fail etc


When clicking any keyword, it will show keyword or debug in top right. Debug is used to debug for the test

Preferences:
For windows: Windows -> preferences
For mac: Click on katalon studio in top left corner -> preferences
This is used to change any default settings of katalon studio

To move to default:
Windows -> default settings


Clicking ? (question mark) will take to documentation page in browser

Ctrl + Alt + C //This will give quick link to component


Help -> Report.  //This is to report any issue and log ticket to katalon if something not working in katalon studio

To skip the step in test we can right click on the step and then click on disable
To skip the test in suite, we can disable checkbox in run 


Tutorial 4: First Test
-------------
3 way we can write the test

1. Record and play //We can click record option and give url and open browser and record all the action and then we replay the same
2. Manual mode //Here we will manually add keyword of each action and do
3. Scripting //Here we can use java or groovy code to create test scripts


Tutorial 5: Record and reply
-----------
To record:
1. Click record button
2. Give url and select browser
3. Click record button
It will launch the browser
4. Do the action which we wanted to record in the link
Katalon studio will capture all the action
5. Then click stop button

6. Option- If we wanted to add validation, we can give that in item
(It will save the objects which has been captured during recording. Give the path where we wanted to save)
7. To reply or to run, We can click run button and select the browser where we wanted to run


Tutorial 6: Create test using manual mode
----------
Using spy web we can able to capture the object
Click spy web, give url and browser and select the object in browser which we need to capture.
Then click the short cut or capture object to capture the object
This will capture the locator
Now we can save the object in folder which we wanted to save in object repo


Now click new button and click test case,
Select the folder where we wanted to add the test
Give the test name and give ok
Click on add button to add item keyword
We can give object and value if needed
To verify we can add verification item like verify text present
Once done, save it
Then click on run button to run on chrome
To run in other browser, click arrow button in run button and then select the browser.
It will run the test on given browser.

We can handle whether we have to stop or continue if any failure in between.
Go to -> project -> settings -> Test case -> Select any (stop on failure / continue on failure / optional) //stop means it will stop if some step got failed, continue mean it will continue even if it fails. but the result will be failed, optional means it wont show as failure even if some test fails if it can move till the end of test )

To handle the same in step level:
Select the step, right click on the step -> select any (stop on failure / continue on failure / optional) //stop means it will stop if some step got failed, continue mean it will continue even if it fails. but the result will be failed, optional means it wont show as failure even if some test fails if it can move till the end of the test )

//We can drag and drop any keyword or object to the test.


Tutorial 7: Creating script in script mode
-------------------------
we can use java or groovy to write the script

We can capture the object using spy mode and save the required object in object repository
To create test, click on add button and give test case name and give ok
Then we can see the test case, we can click on script option, so that it will switch to script mode
We can see the default package/class which has been already imported.

Now we can give WebUI.methoname() or mobile.methodname()
It will show the suggession of available methods.

While writing, we can drag and drop the object, so that it will added in script
To no run any step, we can give like not_run before the line
not_run: WebUI.methodname()

Whatever we write in script mode, it will show the same step in manual mode
Whatever we write in manual mode, it will show the same step in script mode
So it is easy to find script and manual steps


Tutorial 8: How to create and run Test Suite
---------------
Test suite is used to categorize or group the set of test cases

To create Test suite
Add -> Test suite -> Give test suite name

To add test cases in test suite
Select the test suite -> add -> select test cases which we wanted to add in selected test suite

To run test suite
Select the test suite -> Click run button (Select browser or device)

To view log:
We can view the result in Log viewer

To view report:
Report->Select the test suite. It will show the result of each test
Select the test cases. It will show the result of each step
Select step. It will show the log of each step
We can see the summary of report by clicking summary
We have filter to filter pass / fail / error etc
We can able to see logs of each test cases and each steps in test case

In Test suite -> Execution information, we can handle below
Timeout
Retry
Add mail recipients
View last run report
//Select Test suite -> Execution information, we can give timeout or retry or add mail recipients or view last run report



Tutorial 9: Test suite collection - Parallel run
----------------------------------
Test suite collection will have set of test suites

To create test suite collection
Add -> Test suite collection -> Give name of test suite collection
Then add test suite in test suite collection.
Then we can give different browser for each test suite.
We can enable or disable the check on run

In test suite collection -> Execution information
We can select parallel to run parallel
We can select sequence to run sequence


To run:
We can select test suite collection and click run
It will run all test suite in the the collection in given different browsers

Report:
In report we can see the report for test suite collection
It will show all required details of pass, fail etc



Tutorial 10: Report
-------------------
Report will be generated after 
Running the test case
Running the test suite
Running the test suite collection

In Logviewer, we will get all details of pass, fail, warning, error etc
We can filter with same if needed

We can double click the step to show the details of failure

In top right, it will show tree view. This will show the logs in tree
It will show the line number of test case, we can click and move that line

In top right, it will show scroll lock.
This will show recent log on bottom and old log on top
We can click scroll lock to freeze the log


Test suite report
Report -> Test suite -> time
It will show the test suite report
We can click on show test case details to show test cases report

We can click on any test, it will show the report
We can click any step, it will give more detail
If any screenshot is there, it will show the screenshot as well. It will show as attachment button
Information will give details of test execution information of the test
Integration will give details of cicd or any integration details

In test suite -> time
We can right click and click open containing folder
This will open the report folder
Here we can find the report in csv
Here we can find property and log file
Here we can see the report.html will have all details of the complete report
It will show all details, and screeshot if we there


Test suite collection report
It will show available test suite, environment where it runs, it will show number of test cases pass in each suite
Show details will show suite level report
Right click on report of test suite collection -> open container folder, this will also show all report details in folder


If need we can rename the testreport.
Right click on the timestamp and rename
We can see the captured screenshot in step folder. it shows attach button


If we wanted to generate the report automatically after running, then
Project -> settings -> execution 
Here we can check to open the report automatically after execution


All test report will be saved




Tutorial 11: How to Email result:
--------------------

Project -> Settings -> Email

Give host as smtp.gmail.com
port as 465
username as sender email Eg: robin.rymonse@qapitol.com
password of sender email Eg: 123456
Protocol as TLS

Click add button to add recipient/reciever email address. Who ever wanted to recive the emai report, add here


Click on send test email to check whether email report is working or not

If we face any issue while sending test email, go to sender google account.
Click signing to google under Signin & Security,
At the end of page, we can find Allow less secure apps.
Enable this and try sending test mail again.

Once done give apply and Ok.

//If we wanted to send csv and html report along with email result then check send attachment. If not need, then we dont wanted to check


Email notification will be send once the test suite is completed.

Click the test suite for which we need to send the email result.
Click on execution informaion, there we can find add button mail recipients, There we can add receiver email ids.

Now the Email notification will be send once the test suite is completed.


Tutorial 12: How to run from command line:
---------------------------
We will generate the command using katalon studio GUI. And we will use that command.
We can run using command instead of opening katalon GUI.
command can be used for running from cicd
Running using command would be faster when compared to running from GUI.
Running using command will consumes less resource as it wont run on GUI.


Pre-request:
Java should be installed on the system. Then only command line            //java -version   //We can use this command to check whether java is installed or not
Only if we have the java installed, then only we can able to generate the command and run the command


To generate command:
Open katalon studio.
In tool bar, click Build CMD icon.     //This is a command builder.
It will open dialog box.
Select the test suite/test suite collection    //We can generate command for test suite or test suite collection. NOT for test case
Select the browser where we wanted to run
Select output location for report. Else we can keep by default
Add the email recipients
Check display console log
Then give retry count if needed
Now click Generate command button.   //This will give the command 
Now it will give the command
Copy the command somewhere.  we will be using this command to run the test using command


//If we need we can generate the property file by clicking Generate Property file in same dialog box.
Then we can save the property file.  //Property file will have properties like browser, path, file name, report folder, retry count, send mail, test suite details etc.
Whatever we are giving while generating the command, it will have the same details. //Now we can change any property if needed
While running we can give like  Eg(for windows): katalon -propertiesFile="/root/user/tmp/myproper.properties" -runMode=console    or (For mac)  Katalon Studio.app/Contents/MacOS/katalon -propertiesFile="/root/user/tmp/myproper.properties" -runMode=console


To run:
Now open terminal.
Go to location where katalon studio is installed.  //In mac it will be inside /Application/ folder  Eg: cd /Application
Now run the command in terminal.
Now the test will be executed.



Tutorial 13: Integration with Jenkins
--------------------------------
Download and install jenkins
Start jenkins
Once everything is ready.
Create a job
Go to build -> Execute shell / Execute bash shell
Add the command to move to katalon available directory Eg: cd /home/application/katalonavailablepath
Give the generated command here
Apply and save
Now can build the jon and check

If need we can schedule the job to run


//While generating command uncheck "Keep console log after execution completed". It should not be checked. It should be unchecked. Make sure.




Tutorial 14: Integration with Git - Part 1
--------------------------------
Just a basics of GIT.
Nothing related to Katalon here.
So skipping


Tutorial 15: Integration with Git - Part 2
------------------------------
GIT icon will be disabled.
We need to enable it with below
Preferences -> Katalon -> Git - > enable Git integration -> apply and Ok
Now GIT icon show enable


Create repository for project in remote(github or bitbucket)

Now go to katalon
Click GIT icon
Click clone
Give repository url, user name, password
Give next
It will show the branch
Give next.
Now the cloning will be done.

To commit:
Click GIT icon in katalon studio
click commit
Move the files from unstaged to staged. Then give commit message
Then click command and push
Now it will push to remote repository

To pull:
Click GIT icon in katalon studio
Clic pull
Now the pulled changes will reflect



To create or switch to branches:
Click GIT icon in katalon studio
Click Manage branches
There we have option to create new branch or checkout to other branch and other options as well




Tutorial 16: Jenkins + Git integration
--------------------------------
In this example they explained simular about above to examples.
Here they used git pull and before running the katalon running command and git push after run command.

I would say, jenkins itself




Tutorial 23: Environments or execution profiles
------------------------------------------
Execution profile is maintaining global level variables.
Eg: for staging environment we can have one profile with staging credential and staging values
For running in dev environment we can have another profile with dev values.


To create profile: //If need we can use default profile
Right click on profile -> select execution profile
We can many global variables in profile.
Variables in profile are global variables

In test, when ever we wanted to use that variables in profile. we will give type as global variables, then we will select the variable.


In test suite collection, we can give the profile which needs to be picked for test suite which is under test collection

In cicd, we can give profile in additional command Eg: -executionProfile="staging" 












Tutorial 28: How to create customer keyword
-------------
Katalon studio is giving option to creator own keyword.
If some keyword is not available in katalon studio, we can create our own keyword


To create keyword:         
File -> New -> Keyword
Give the package name and class name.    //If package is not there, then create package using file -> new package   //Class name we can give new class name
// if wanted to generate sample keyword, check Generate sample keyword for web/mobile/API
It will create groovy class along with few import startement
To create function we can use def 
To make the function as keyword we need to use @Keyword annotation above the function

Eg:
com.mytest.demo
...more import statements..

public class MyClass {
  

  @Keyword
  def myPrintState(){
    println("...my priting statement")
  }

  @Keyword
  def myPrintMyName(String name){
    println("name: " + name)
  }

}



Once done, save it.
It will be saved under Custom Keywords/General folder
Now in test step we can use this keyword



//To view build in keyword, press keyword symbol near to project view.
It will show all build in keyword, custom keywords and utils.
In custom keywordsm we can found our created keyword



Tutorial 29: Checkpoint
-----------------
Tutorial 29: How to create checkpoints
-------------------------------------
Checkpoint will store the snapshot for data source (csv, db data, excel data etc).
It will store the snapshot of data when checkpoint was taken.
Later if need, we can check snapshot of previous and current value in data source (csv, db data, excel data etc).


To create checkpoint:
Right click on checkpoint -> new -> checkpoint
or
File -> New -> Checkpoint
Give checkpoint name
Then give data type. Give whether it should read data from test data or excel file or csv file or database data.
Then click next
Give path of the data file
if need we can give seperator. whether it is comma or tab or semi colon. By default it will take from reading
If it has multiple sheet, it shows sheet name also.
Check whether it should use header row or not
Check whether the file is in absolute or relative path
Then click ok button.
Now it will show the contend of checkout.
We can check if we wanted to use those data as checkpoint

To verify checkpoint:
In step add verify checkpoint.
Give the checkpoint which we wanted to verify
Give true we wanted to log the value in console

What verify checkpoint step will do:
It will check the snapshot value and current value in data source file (test data or csv or excel or db data)
If both are same, it will pass.
If both are different, it will fail



//We can also give data base and query here as the checkpoint.
//It will compare the current data in db with snapshot value.



Tutorial 30: Variables
-------------------------
We can add variables in 3 ways

Way 1: Directly in script. This is not recommented
Eg:
String name = "Ram"
This we can use in the test


Way 2: Click on variables, click on Add button to add the variable and its value.
This we can use in the test

Way 3: Go to profiles, click on any profile or default. Click on add button to add the variable. This will be global variable. 
This variable we can use in any where in the project



Tutorial 31: Getting test data from excel / csv file
-----------------------------

For adding csv/excel file as test data:
Create a csv/excel file and add the keys and its values
Right click on  Data Files -> New -> Test data or to to Files -> New -> Test data
Now give the test data name
Give data type. where it should take from excel or csv file or database data or internal data  //Internal data means, we can directly give in test data
Now it will create.
Now give the file path of csv/excel where the data is there. 
Now it shows the data in the window
Select the sheet, if there are multiple sheet in excel
Check first row as header, if first row contains header
Check use relative path, if needed


For adding test data  in test case:
In TestCase, Go to variables and add variables
Click on the step which we wanted to add test data
In value type select Test data value. 
In value, select the values.

To add in test using scripting,
use findTestData("testdatafoldername/testdataname").getValue(columnNumber, rowNumber)
Eg:
WebUI.setText(findTestObject('Object Repository/mypage/user_name'), findTestData("data1").gatValue(1,1))
Eg: For iterating each value in data
for(def rowNum=1; rowNum <= findTestData("data1").getRowNumbers(); rowNum++) {
  
  WebUI.setText(findTestObject('Object Repository/mypage/user_name'), findTestData("data1").gatValue(1,rowNum))    //If need we can iterate in column as well
}
//If we add for loop statement, in manual mode, it will show For Loop Statements


For adding test data in test suite:
Go to test suite,
Click show data binding.
It should show Test data and variable binding.
In variable binding, it should show the variables used in test cases of test suite
In Test data, click add button
Then select the test data
In variables binding, in each variables click on type,
Select data column.
In Test data column, add created test data.
In values, select the variables
Same we ca do for other variables



Tutorial 32: Re-use test case or refer test case
-------------------------------------------------

To call other test:
Go to our current test case,
Go to Add -> Call Test case -> Select the test case which we want to use here.
Now steps in added test cases will be called in our current test.


//We can have multiple set of repeated action as each test. Add we can call in other test.
//We can have verifing set of steps also and we can use in other test
//So that we can avoid repeated/duplication of steps.
We can save time as well.



Good practise:
//For each set of steps, we can create as seperate test. Values should be taken from variables.
//Now in new main test, we can call these test cases. We can pass the test data for each of the test








Katalon studio jenkins plugins: (36th video in same playlist)
------------------------
Jenkins has katalon studio which will help to run katalon studio test in jenkins
This plugin will also take of installation of katalon in jenkins server. We no need to manually install katalon studio


https://plugins.jenkins.io/katalon/


To install katalon studio plugin in jenkins:
Go to jenkins
Go to manage jenkins
Go to Manage plugins
Go to availabel plugins
Search for katalon studio
Install this plugin


How to configure jenkins job for katalon studio:
Go to jenkins.
Create job using free style project
In configue of job go to build
Click add build step
Select Execute katalon studio test   //This will be available only if katalon studio plugin is installed
Give the version of katalon studio which needs to be download. give in "Download katalon studio version". It will automatically install the katalon in jenkins server. Just give the version.
If we dont want to download and if we wanted to use existing installed katalon studio, then give the path in "Use pre-installed katalon studio"
In katalon studio generate command for the test suite which we wanted to run. Just copy few commands. Just required option in commands should be fine. That we can paste in command arguments. 
This command arguments is for passing extra arguments which we got from above using generate command
//we dont want to give -runMode. If we not give -projectPath it will set the current working directory
//if need we can specify the current workspace in job configue. if not we can leave it
//Only first time it will download the katalon studio with given version. Next time it wont download




To add report in jenkins:
In jenkins job configue,
Go to post-build action
Select junit test result report
In Test report XMLs field give the path where the xml report is available Eg: /Reports/TestSuitename/*/*.xml    //We are giving * because the folder name is in date time format
Save and apply.
Now from next run, it should show the test result trend in main page of the job


Another report:
We can add Test result analyser plugin
This will show more detail of the test.
This will show Test result analyser option in job. This will show more details of result.
This will automatically come only if junit test result report is added in post build action. If not, it wont show














Re-Using existing test steps to create another test case:
--------------------------------------------------------
We can reuse existing test steps and start recording from that that point.
It will run till the existing step, then we can continue our new steps.


Create new test case.
Go to Add -> Call Test case -> Add existing test case which can move till expected page   //If any close browser / close application is there, disable/remove the step before adding here.
Now click on record option.
It will ask where we want to continue recording. Give Yes.
Now in record window we can see along with existing steps.
Now click on green color play icon right side just above the steps. 
It will run till our steps automatically.
Now we can continue our action, it will record the steps and object.
Close the window/app or stop it.
//Click play icon to reverify.
Now save the objects.
Save the test. It will ask whether to override or append.
Click override

Thats it.




Passing value in any of the object repo:
--------------------------------------
We can pass the value of object from the test.
We can give the the key in object like below
Eg:
${keyname}

So in object repo. it will like below eg: in xpath
Eg:
//XCUIElementTypeKey[@name="${community}"]


And in test in script mode, we will pass the value like below

In script mode will pass like below
 Mobile.tap(findTestObject('Page/mypage/communityToselect', [('community') : 'Downtown Dubai']), 0)







Other notes:
-----------
------------
//If need we can create folder in test case and we can add the test cases into the folder.
Default timeout is available in Project -> settings -> execution ->



























